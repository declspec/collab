using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Security.Principal;
using Collab.Auth.Providers;

namespace Collab.Auth.Identity
{
    /// <summary>
    /// Handles common ways to create an identity.
    /// </summary>
    public interface IIdentityService
    {
        /// <summary>
        /// Create a user's identity based off their name for a particular authentication type 
        /// </summary>
        /// <param name="userName">The unique identifier for the user's identity</param>
        /// <param name="authenticationType">The authentication type used see <see cref="SkrillaAuthenticationTypes"/> for a list of Skrilla's authentication types</param>
        /// <returns>Returns a fully fleshed-out identity for the user, including claims from any registered <see cref="IClaimsProvider"/>s</returns>
        ClaimsIdentity Create(string userName, string authenticationType);
        /// <summary>
        /// Create a user's identity based off their name and base role for a particular authentication type 
        /// </summary>
        /// <param name="userName">The unique identifier for the user's identity</param>
        /// <param name="role">The base role</param>
        /// <param name="authenticationType">The authentication type used see <see cref="SkrillaAuthenticationTypes"/> for a list of Skrilla's authentication types</param>
        /// <returns>Returns a fully fleshed-out identity for the user, including claims from any registered <see cref="IClaimsProvider"/>s</returns>
        ClaimsIdentity Create(string userName, string role, string authenticationType);
        /// <summary>
        /// Create a user's identity based off their name and a set of roles for a particular authentication type 
        /// </summary>
        /// <param name="userName">The unique identifier for the user's identity (usually a Curtin ID)</param>
        /// <param name="roles">The roles to grant the identity, in addition to any generated by Claims Providers. These can be 3rd party roles from the authentication provider</param>
        /// <param name="authenticationType">The authentication type used see <see cref="SkrillaAuthenticationTypes"/> for a list of Curtin's authentication types</param>
        /// <returns>Returns a fully fleshed-out identity for the user, including claims from any registered <see cref="IClaimsProvider"/>s</returns>
        ClaimsIdentity Create(string userName, IEnumerable<string> roles, string authenticationType);

        /// <summary>
        /// Create a user's identity based off an existing identity, potentially from an external source.
        /// </summary>
        /// <param name="identity">An existing IIdentity instance</param>
        /// <returns>Returns a fully fleshed-out identity for the user, including claims from any registered <see cref="IClaimsProvider" />s</returns>
        /// <remarks>Use this method to clone an identity from an external source and attach any claims from the <see cref="IClaimsProvider" />s</remarks>
        ClaimsIdentity Create(IIdentity identity);
    }

    public class IdentityService : IIdentityService
    {
        private readonly IEnumerable<IClaimsProvider> _claimsProviders;

        public IdentityService(IEnumerable<IClaimsProvider> claimsProviders)
        {
            _claimsProviders = claimsProviders;
        }

        public void AttachClaims(ClaimsIdentity identity)
        {
            if (_claimsProviders != null)
                identity.AddClaims(_claimsProviders.SelectMany(provider => provider.GetClaims(identity)));
        }

        public ClaimsIdentity Create(string userName, string authenticationType) {
            return Create(userName, Enumerable.Empty<string>(), authenticationType);
        }

        public ClaimsIdentity Create(string userName, string role, string authenticationType)
        {
            return Create(userName, new[] { role }, authenticationType);
        }

        public ClaimsIdentity Create(string userName, IEnumerable<string> roles, string authenticationType)
        {
            var identity = new ClaimsIdentity(authenticationType);
            identity.AddClaim(new Claim(identity.NameClaimType, userName.ToUpper()));

            if (roles != null)
            {
                foreach (var role in roles)
                    identity.AddClaim(new Claim(identity.RoleClaimType, role));
            }

            AttachClaims(identity);
            return identity;
        }

        public ClaimsIdentity Create(IIdentity identity)
        {
            var claimsIdentity = new ClaimsIdentity(identity);
            AttachClaims(claimsIdentity);
            return claimsIdentity;
        }
    }
}
